"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Line = void 0;

var _react = _interopRequireWildcard(require("react"));

var _big = _interopRequireDefault(require("big.js"));

var _clone = _interopRequireDefault(require("clone"));

var _core = require("@echarts-readymade/core");

var _echartsForReact = _interopRequireDefault(require("echarts-for-react"));

var _excluded = ["context", "dimension", "compareDimension", "valueList", "echartsSeries", "xAxisData", "setOption", "sortXAxis"],
    _excluded2 = ["option"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Line = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var context = props.context,
      dimension = props.dimension,
      compareDimension = props.compareDimension,
      valueList = props.valueList,
      echartsSeries = props.echartsSeries,
      xAxisData = props.xAxisData,
      setOption = props.setOption,
      sortXAxis = props.sortXAxis,
      restSettings = _objectWithoutProperties(props, _excluded);

  var _useContext = (0, _react.useContext)(context),
      data = _useContext.data,
      echartsOptions = _useContext.echartsOptions,
      chartOption = _useContext.echartsOptionsBase,
      userOptions = _useContext.userOptions;

  var _ref = echartsOptions || {},
      option = _ref.option,
      resetOptions = _objectWithoutProperties(_ref, _excluded2);

  if (!data) {
    return null;
  }

  var _dimension = dimension && dimension.slice(0, 1);

  var _chartOption = (0, _clone["default"])(chartOption || {});

  if (_chartOption) {
    var _xAxis = [];
    var _preProcessData = [];
    var _processData = [];
    var compareDimensionValues = [];

    if (compareDimension && compareDimension.length > 0) {
      (function () {
        var _chartOption$yAxis;

        // 对比维度全量值
        compareDimensionValues = _toConsumableArray(new Set(data === null || data === void 0 ? void 0 : data.map(function (d) {
          return compareDimension.map(function (dim) {
            return d[dim.fieldKey];
          }).join('~');
        })));
        compareDimensionValues = compareDimensionValues.filter(function (cdv) {
          return !(cdv.startsWith('~') || cdv.endsWith('~'));
        }); // 按维度分组

        data === null || data === void 0 ? void 0 : data.forEach(function (d) {
          var _index = _preProcessData.findIndex(function (item) {
            return item.name == (_dimension && d[_dimension === null || _dimension === void 0 ? void 0 : _dimension[0].fieldKey]);
          });

          if (_index != -1) {
            _preProcessData[_index].data.push(d);
          } else {
            _preProcessData.push({
              name: _dimension && d[_dimension === null || _dimension === void 0 ? void 0 : _dimension[0].fieldKey],
              data: [d]
            });
          }
        }); // 按照name排序

        _preProcessData = _preProcessData.sort(function (a, b) {
          return "".concat(a.name).localeCompare("".concat(b.name));
        }); // 在维度分组基础上，分组对比维度

        _processData = compareDimensionValues.map(function (item) {
          return {
            name: item,
            data: _preProcessData.map(function (pd) {
              var v = pd.data.find(function (d) {
                return compareDimension.map(function (dim) {
                  return d[dim.fieldKey];
                }).join('~') == item;
              });

              if (v) {
                return v;
              } else {
                var _v = {};

                if (_dimension && _dimension[0]) {
                  _v[_dimension[0].fieldKey] = pd.name;
                }

                return _v;
              }
            })
          };
        }); // X轴数据

        var _data = _toConsumableArray(new Set(data === null || data === void 0 ? void 0 : data.map(function (d) {
          return _dimension && d[_dimension[0].fieldKey];
        })));

        if (sortXAxis) {
          _data = _data.sort(function (a, b) {
            return "".concat(a).localeCompare("".concat(b));
          });
        }

        _xAxis = [{
          type: 'category',
          splitLine: {
            show: false,
            lineStyle: {}
          },
          axisLine: {
            show: true,
            lineStyle: {}
          },
          axisTick: {
            show: true,
            lineStyle: {}
          },
          axisLabel: {
            padding: [0, 0, 0, 0],
            rotate: 30
          },
          data: _data
        }]; // Y轴数据

        var _seriesValueList = [];

        var _loop = function _loop(i) {
          var _data = (0, _clone["default"])(_processData[i].data) || [];

          var compareDimensionName = "".concat(_processData[i].name);
          valueList === null || valueList === void 0 ? void 0 : valueList.forEach(function (v) {
            _seriesValueList.push({
              name: valueList.length > 1 ? "".concat(compareDimensionName, "~").concat(v.fieldName) : compareDimensionName,
              payload: v,
              type: v.type || 'line',
              barGap: 0,
              barMaxWidth: 60,
              lineStyle: {
                shadowColor: 'rgba(0,0,0,0.15)',
                shadowBlur: 3,
                shadowOffsetX: 0,
                shadowOffsetY: 1
              },
              data: _data.map(function (d) {
                if (d[v.fieldKey] !== null && typeof d[v.fieldKey] !== 'undefined' && !isNaN(d[v.fieldKey])) {
                  var result = (0, _big["default"])(d[v.fieldKey]);

                  if (v.isPercent) {
                    result = result.times(100);
                  }

                  return {
                    value: result.round(v.decimalLength || 0).toNumber(),
                    isPercent: v.isPercent,
                    decimalLength: v.decimalLength,
                    payload: d
                  };
                }

                return {
                  value: null,
                  isPercent: v.isPercent,
                  decimalLength: v.decimalLength
                };
              }),
              yAxisIndex: v.yAxisIndex || 0
            });
          });
        };

        for (var i = 0; i < _processData.length; i++) {
          _loop(i);
        }

        _chartOption.xAxis.data = xAxisData || _data;

        if (valueList !== null && valueList !== void 0 && valueList.find(function (v) {
          return v.yAxisIndex === 1;
        }) && (_chartOption$yAxis = _chartOption.yAxis) !== null && _chartOption$yAxis !== void 0 && _chartOption$yAxis[1]) {
          _chartOption.yAxis[1].show = true;
        }

        _chartOption.series = echartsSeries || _seriesValueList;
      })();
    } else {
      var _chartOption$yAxis2;

      // 无对比维度
      _chartOption.xAxis.data = xAxisData || data && data.map(function (d) {
        var _dimension$;

        var value = dimension && d[dimension === null || dimension === void 0 ? void 0 : (_dimension$ = dimension[0]) === null || _dimension$ === void 0 ? void 0 : _dimension$.fieldKey];

        if (value != null) {
          return "".concat(value);
        }
      });

      if (valueList !== null && valueList !== void 0 && valueList.find(function (v) {
        return v.yAxisIndex === 1;
      }) && (_chartOption$yAxis2 = _chartOption.yAxis) !== null && _chartOption$yAxis2 !== void 0 && _chartOption$yAxis2[1]) {
        _chartOption.yAxis[1].show = true;
      }

      _chartOption.series = echartsSeries || (valueList === null || valueList === void 0 ? void 0 : valueList.map(function (v) {
        return {
          name: v.fieldName,
          payload: v,
          type: v.type || 'line',
          lineStyle: {
            shadowColor: 'rgba(0,0,0,0.15)',
            shadowBlur: 3,
            shadowOffsetX: 0,
            shadowOffsetY: 1
          },
          data: data && data.map(function (d) {
            if (d[v.fieldKey] !== null && typeof d[v.fieldKey] !== 'undefined' && !isNaN(d[v.fieldKey])) {
              var result = (0, _big["default"])(d[v.fieldKey]);

              if (v.isPercent) {
                result = result.times(100);
              }

              return {
                value: result.round(v.decimalLength || 0).toNumber(),
                isPercent: v.isPercent,
                decimalLength: v.decimalLength
              };
            }

            return {
              value: null,
              isPercent: v.isPercent,
              decimalLength: v.decimalLength,
              payload: d
            };
          }),
          yAxisIndex: v.yAxisIndex || 0
        };
      }));
    }
  }

  var builtOption = (0, _core.buildChartOption)(_chartOption, restSettings, 'line');
  var options = (0, _core.mergeOption)(builtOption, userOptions);

  if (setOption) {
    options = setOption((0, _clone["default"])(options));
  }
  /**
   * forward the ref for getEchartsInstance()
   */


  var reactEchartsRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      getEchartsInstance: function getEchartsInstance() {
        var _reactEchartsRef$curr;

        return reactEchartsRef === null || reactEchartsRef === void 0 ? void 0 : (_reactEchartsRef$curr = reactEchartsRef.current) === null || _reactEchartsRef$curr === void 0 ? void 0 : _reactEchartsRef$curr.getEchartsInstance();
      }
    };
  }, [reactEchartsRef]);
  return /*#__PURE__*/_react["default"].createElement(_echartsForReact["default"], _extends({
    ref: function ref(e) {
      reactEchartsRef.current = e;
    },
    option: _objectSpread({}, (0, _clone["default"])(options)),
    notMerge: true,
    opts: {
      renderer: 'svg'
    },
    style: {
      height: '100%',
      width: '100%'
    }
  }, resetOptions));
});
exports.Line = Line;