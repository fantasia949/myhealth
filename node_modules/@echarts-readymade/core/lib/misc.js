"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeOption = exports.echartsOptionsBase = exports.COLOR_LIST = void 0;
exports.numberWithCommas = numberWithCommas;
exports.truncate = void 0;

var _big = _interopRequireDefault(require("big.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var COLOR_LIST = ['#FF7C7C', '#ADD4EF', '#BFDAA7', '#FCAC65', '#C6C1D2', '#7598E4', '#CF6D6C', '#4979CF', '#E1934B', '#829649', '#7D70AC', '#2559B7'];
exports.COLOR_LIST = COLOR_LIST;
var echartsOptionsBase = {
  title: {
    show: true,
    text: '',
    top: 30,
    left: 24,
    textAlign: 'left',
    textStyle: {
      color: 'rgba(0,0,0,0.65)',
      fontSize: 16,
      lineHeight: 1
    }
  },
  grid: {
    x: 30,
    x2: 30,
    top: 90,
    bottom: 30,
    containLabel: true
  },
  toolbox: {
    show: false
  },
  tooltip: {
    show: true,
    trigger: 'axis',
    backgroundColor: 'rgba(255,255,255,0.9)',
    extraCssText: 'box-shadow:  0px 0px 4px 0px rgba(0,0,0,0.25); border-radius: 2px; padding:10px 14px',
    formatter: function formatter(data) {
      var _data = Array.isArray(data) ? data : [data];

      var _len = (0, _big["default"])(_data.length);

      var _count = _len.div(10).round(0, _big["default"].roundUp).toNumber();

      return "<div style=\"color: #c8c8c8;\">".concat(_data[0].name, "</div><div style=\"column-count: ").concat(_count, ";\">").concat(_data.map(function (d) {
        switch (d.seriesType) {
          case 'pie':
            return "<div>\n                      <span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:".concat(d.color, "\"></span>\n                      <span style=\"color: #595959;\">").concat(d.seriesName, ":</span>\n                      <span style=\"color: #262626;\">").concat(d.data.isShowPercentValue ? d.percent + '%' : d.data.value == null ? '--' : d.data.isPercent ? numberWithCommas(d.data.value) + '%' : numberWithCommas((0, _big["default"])(d.data.value).toFixed(d.data.decimalLength != null ? d.data.decimalLength : 2)), "</span>\n                  </div>");

          case 'line':
            return "<div>\n                      <span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:".concat(d.color, "\"></span>\n                      <span style=\"color: #595959;\">").concat(d.seriesName, ":</span>\n                      <span style=\"color: #262626;\">").concat(d.data.value == null ? '--' : d.data.isPercent ? d.data.value != null ? "".concat(numberWithCommas(d.data.value), "%") : "--" : numberWithCommas((0, _big["default"])(d.data.value).toFixed(d.data.decimalLength != null ? d.data.decimalLength : 2)), "</span>\n                  </div>");

          default:
            return "<div>\n                      <span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:".concat(d.color, "\"></span>\n                      <span style=\"color: #595959;\">").concat(d.seriesName, ":</span>\n                      <span style=\"color: #262626;\">").concat(d.data.value == null ? '--' : d.data.isPercent ? numberWithCommas(d.data.value) + '%' : numberWithCommas((0, _big["default"])(d.data.value).toFixed(d.data.decimalLength != null ? d.data.decimalLength : 2)), "</span>\n                  </div>");
        }
      }).join(''), "</div>");
    }
  },
  xAxis: {
    type: 'category',
    offset: 0,
    axisLine: {
      show: true,
      lineStyle: {
        color: '#D9D9D9'
      }
    },
    axisTick: {
      show: true,
      lineStyle: {}
    },
    splitLine: {
      show: false,
      lineStyle: {}
    },
    axisLabel: {
      rotate: 45,
      align: 'right',
      textStyle: {
        color: '#8C8C8C'
      }
    },
    data: []
  },
  yAxis: [{
    show: true,
    type: 'value',
    name: '',
    // scale: true,
    splitLine: {
      show: true,
      lineStyle: {
        color: '#E7EAEF',
        type: 'dashed'
      }
    },
    axisLine: {
      show: false,
      lineStyle: {
        color: '#D9D9D9'
      }
    },
    axisLabel: {
      textStyle: {
        color: '#8C8C8C'
      }
    },
    axisTick: {
      show: false,
      lineStyle: {}
    } // min: 0,

  }, {
    show: false,
    type: 'value',
    name: '',
    // scale: true,
    splitLine: {
      show: false,
      lineStyle: {}
    },
    axisLine: {
      show: false,
      lineStyle: {
        color: '#D9D9D9'
      }
    },
    axisLabel: {
      textStyle: {
        color: '#8C8C8C'
      }
    },
    axisTick: {
      show: false,
      lineStyle: {}
    } // min: 0,

  }],
  color: COLOR_LIST,
  textStyle: {},
  legend: {
    itemWidth: 10,
    itemHeight: 10,
    top: 30,
    left: 24,
    selectedMode: false,
    textStyle: {
      padding: [2, 0, 0, 0]
    },
    show: true,
    type: 'scroll',
    position: 'bottom',
    fontSize: 12,
    icon: 'circle'
  },
  series: null
};
exports.echartsOptionsBase = echartsOptionsBase;

var mergeOption = function mergeOption(baseOptions) {
  var userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _baseOptions = baseOptions || {};

  var _userOptions = userOptions || {};

  var _mergeOptions = _objectSpread(_objectSpread({}, _baseOptions), _userOptions);

  return _mergeOptions;
};

exports.mergeOption = mergeOption;

var truncate = function truncate(str, n) {
  var r = /[^\x00-\xff]/g;
  var m;

  if (!str) {
    return '';
  }

  if (str.replace(r, '**').length > n) {
    m = Math.floor(n / 2);

    for (var i = m, l = str.length; i < l; i++) {
      if (str.slice(0, i).replace(r, '**').length >= n) {
        return str.slice(0, i) + '...';
      }
    }
  }

  return str;
};

exports.truncate = truncate;

function numberWithCommas(x) {
  if (x === null || typeof x === 'undefined') {
    return '--';
  }

  var parts = x.toString().split('.');
  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  return parts.join('.');
}