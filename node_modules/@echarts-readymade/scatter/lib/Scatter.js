"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Scatter = void 0;

var _react = _interopRequireWildcard(require("react"));

var _big = _interopRequireDefault(require("big.js"));

var _clone = _interopRequireDefault(require("clone"));

var _core = require("@echarts-readymade/core");

var _echartsForReact = _interopRequireDefault(require("echarts-for-react"));

var _excluded = ["context", "dimension", "compareDimension", "valueList", "echartsSeries", "setOption", "minDotSize", "maxDotSize", "colorMap"],
    _excluded2 = ["option"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Scatter = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var context = props.context,
      dimension = props.dimension,
      compareDimension = props.compareDimension,
      valueList = props.valueList,
      echartsSeries = props.echartsSeries,
      setOption = props.setOption,
      minDotSize = props.minDotSize,
      maxDotSize = props.maxDotSize,
      colorMap = props.colorMap,
      restSettings = _objectWithoutProperties(props, _excluded);

  var _useContext = (0, _react.useContext)(context),
      data = _useContext.data,
      echartsOptions = _useContext.echartsOptions,
      chartOption = _useContext.echartsOptionsBase,
      userOptions = _useContext.userOptions;

  var _ref = echartsOptions || {},
      option = _ref.option,
      resetOptions = _objectWithoutProperties(_ref, _excluded2);

  if (!data) {
    return null;
  }

  var _dimension = dimension && dimension.slice(0, 1);

  var _valueList = valueList && valueList.slice(0, 3);

  var _chartOption = (0, _clone["default"])(chartOption || {});

  if (!_dimension || !_valueList || _dimension.length < 1 || _valueList.length < 2) {
    return null;
  }

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      dataZoomX = _useState2[0],
      setDataZoomX = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      dataZoomY = _useState4[0],
      setDataZoomY = _useState4[1];

  if (_chartOption) {
    if (compareDimension && compareDimension.length > 0) {
      var _processData2;

      // 有对比维度
      var _preProcessData = [];
      var _processData = [];
      var compareDimensionValues = [];
      var dotValueMin = 100;
      var dotValueMax = 0; // 对比维度全量值

      compareDimensionValues = _toConsumableArray(new Set(data === null || data === void 0 ? void 0 : data.map(function (d) {
        return d[compareDimension[0] && compareDimension[0].fieldKey];
      }))); // 按维度分组

      data === null || data === void 0 ? void 0 : data.forEach(function (d) {
        var _index = _preProcessData.findIndex(function (item) {
          return item.name == d[_dimension[0] && _dimension[0].fieldKey];
        });

        if (_index != -1) {
          _preProcessData[_index].data.push(d);
        } else {
          _preProcessData.push({
            name: d[_dimension[0] && _dimension[0].fieldKey],
            data: [d]
          });
        }
      }); // 在维度分组基础上，分组对比维度

      _processData = compareDimensionValues.map(function (item) {
        return {
          name: item,
          data: _preProcessData.map(function (pd) {
            var v = pd.data.find(function (d) {
              return d[compareDimension[0] && compareDimension[0].fieldKey] == item;
            });

            if (v) {
              // 有散点值字段， valueList的第三个字段
              if (valueList.length == 3) {
                dotValueMin = Math.min(v[valueList[2].fieldKey], dotValueMin);
                dotValueMax = Math.max(v[valueList[2].fieldKey], dotValueMax);
              }

              return v;
            } else {
              var _v = {};
              _v[_dimension[0] && _dimension[0].fieldKey] = pd.name;
              return _v;
            }
          })
        };
      }); // 散点颜色

      var userColorFromSetOption = null;

      if (setOption) {
        var _option = setOption((0, _clone["default"])(_chartOption));

        userColorFromSetOption = _option.color;
      }

      var getColor = (0, _react.useCallback)(function (index) {
        var userColor = userOptions === null || userOptions === void 0 ? void 0 : userOptions.color;

        if (userColorFromSetOption) {
          return userColorFromSetOption[index % userColorFromSetOption.length];
        } else if (userColor) {
          return userColor[index % userColor.length];
        } else {
          return _core.COLOR_LIST[index % _core.COLOR_LIST.length];
        }
      }, [userOptions === null || userOptions === void 0 ? void 0 : userOptions.color, userColorFromSetOption]); // 散点大小

      var minSymbolSize = minDotSize !== null && minDotSize !== void 0 ? minDotSize : 50;
      var maxSymbolSize = maxDotSize !== null && maxDotSize !== void 0 ? maxDotSize : 100;
      var getSymbolSize = (0, _react.useCallback)(function (dotValue) {
        var scale = _valueList.length === 3 ? (0, _big["default"])(dotValueMax - dotValueMin).div(maxSymbolSize - minSymbolSize).toNumber() || 1 : 1;
        return _valueList.length === 3 ? (0, _big["default"])(dotValue - dotValueMin).div(scale).plus(minSymbolSize).round(2).toNumber() : 80;
      }, [getColor]);
      _chartOption.grid.x = 70;
      _chartOption.grid.x2 = 130;
      _chartOption.grid.top = 50;
      _chartOption.grid.bottom = 130;
      _chartOption.xAxis.name = _valueList[0].fieldName;
      _chartOption.xAxis.nameLocation = 'center';
      _chartOption.xAxis.nameTextStyle = {
        color: '#666'
      };
      _chartOption.xAxis.nameGap = 40;
      _chartOption.xAxis.type = 'value';
      _chartOption.xAxis.show = true;

      _chartOption.xAxis.axisLabel.formatter = function (value) {
        return "".concat(value).concat(_valueList[0].isPercent ? '%' : '');
      };

      _chartOption.yAxis[0].show = true;
      _chartOption.yAxis[0].name = _valueList[1].fieldName; // _chartOption.yAxis[0].nameRotate = -90;

      _chartOption.yAxis[0].nameGap = 60;
      _chartOption.yAxis[0].nameLocation = 'center';
      _chartOption.yAxis[0].nameTextStyle = {
        color: '#666'
      };

      _chartOption.yAxis[0].axisLabel.formatter = function (value) {
        return "".concat(value).concat(_valueList[1].isPercent ? '%' : '');
      };

      _chartOption.xAxis.boundaryGap = ['1%', '1%'];
      _chartOption.xAxis.axisLine.show = false;
      _chartOption.xAxis.axisTick.show = false;
      _chartOption.xAxis.offset = 20;
      _chartOption.yAxis[0].axisLine.show = false;
      _chartOption.yAxis[0].axisTick.show = false;
      _chartOption.yAxis[0].boundaryGap = ['1%', '1%'];
      _chartOption.yAxis[0].offset = 20;
      _chartOption.tooltip = {
        show: true,
        trigger: 'item',
        backgroundColor: 'rgba(255,255,255,0.9)',
        extraCssText: 'box-shadow: 0px 0px 4px 0px rgba(0,0,0,0.25); border-radius: 2px; padding:10px 14px',
        formatter: function formatter(item) {
          return "<div style=\"color: #c8c8c8;\">\n                  <span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:".concat(item.color, "\"></span>\n                  <span>").concat(item.name, ":</span>\n                  <div><span style=\"color: #595959;\">").concat(_valueList[0].fieldName, "</span>:<span style=\"color: #262626;\">").concat(item.value[0]).concat(_valueList[0].isPercent ? '%' : '', "</span></div>\n                  <div><span style=\"color: #595959;\">").concat(_valueList[1].fieldName, "</span>:<span style=\"color: #262626;\">").concat(item.value[1]).concat(_valueList[1].isPercent ? '%' : '', "</span></div>\n              </div>");
        }
      };
      _chartOption.series = echartsSeries || _processData.map(function (pd, i) {
        var _d = pd.data && pd.data.map(function (d, j) {
          var itemColor = getColor(i);

          if (colorMap && colorMap.length > 0) {
            var foudColor = colorMap.find(function (item) {
              return item.name === pd.name;
            });

            if (foudColor) {
              itemColor = foudColor.color;
            }
          }

          var _value = [].concat(_toConsumableArray(_valueList.map(function (v) {
            var _v = undefined;

            if (d[v.fieldKey] != null) {
              _v = (0, _big["default"])(d[v.fieldKey]);

              if (v.isPercent) {
                _v = _v.times(100);
              }

              _v = _v.round(v.decimalLength || 0).toNumber();
            }

            return _v;
          })), [d]);

          return {
            name: pd.name + '-' + d[_dimension[0].fieldKey],
            value: _value,
            itemStyle: {
              color: itemColor
            },
            label: {
              show: true,
              position: 'inside',
              color: '#000',
              formatter: function formatter(params) {
                var name = params.data.name;
                return (0, _core.truncate)(name, 6);
              },
              fontSize: 12,
              rich: {
                text: {
                  color: '#000'
                }
              }
            }
          };
        }) || [];

        return {
          name: pd.name,
          type: 'scatter',
          symbolSize: function symbolSize(item) {
            return item[2] != null ? getSymbolSize(item[2]) : 20;
          },
          data: _d
        };
      });
      var xMin = 0,
          xMax = 0,
          yMin = 0,
          yMax = 0;
      (_processData2 = _processData) === null || _processData2 === void 0 ? void 0 : _processData2.forEach(function (item) {
        item.data.forEach(function (d) {
          xMin = Math.min((0, _big["default"])(d[_valueList[0].fieldKey] || 0).round(0).toNumber(), xMin);
          xMax = Math.max((0, _big["default"])(d[_valueList[0].fieldKey] || 0).round(0).toNumber(), xMax);
          yMin = Math.min((0, _big["default"])(d[_valueList[1].fieldKey] || 0).round(0).toNumber(), yMin);
          yMax = Math.max((0, _big["default"])(d[_valueList[1].fieldKey] || 0).round(0).toNumber(), yMax);
        });
      });

      if (_valueList[0].isPercent) {
        xMin = (0, _big["default"])(xMin).times(100).toNumber();
        xMax = (0, _big["default"])(xMax).times(100).toNumber();
      }

      if (_valueList[1].isPercent) {
        yMin = (0, _big["default"])(yMin).times(100).toNumber();
        yMax = (0, _big["default"])(yMax).times(100).toNumber();
      }

      var _dataZoom = [// {
        //   type: 'inside',
        //   show: true,
        //   xAxisIndex: [0],
        //   bottom: 30,
        //   start: 0,
        //   end: 100,
        //   labelFormatter: '',
        // },
        // {
        //   type: 'inside',
        //   show: true,
        //   yAxisIndex: [0],
        //   right: 0,
        //   start: 0,
        //   end: 100,
        //   labelFormatter: '',
        // },
      ];

      if (dataZoomX) {
        _dataZoom.push({
          type: 'slider',
          show: true,
          xAxisIndex: [0],
          bottom: 30,
          start: dataZoomX.start,
          end: dataZoomX.end,
          throttle: 150
        });
      } else {
        _dataZoom.push({
          type: 'slider',
          show: true,
          xAxisIndex: [0],
          bottom: 30,
          startValue: xMin || 0,
          endValue: xMax && (0, _big["default"])(xMax).plus((0, _big["default"])(xMax).times(0.1).abs().toNumber()).toNumber() || 100,
          throttle: 150
        });
      }

      if (dataZoomY) {
        _dataZoom.push({
          type: 'slider',
          show: true,
          yAxisIndex: [0],
          right: 30,
          start: dataZoomY.start,
          end: dataZoomY.end
        });
      } else {
        _dataZoom.push({
          type: 'slider',
          show: true,
          yAxisIndex: [0],
          right: 30,
          startValue: yMin || 0,
          endValue: yMax || 100
        });
      }

      _chartOption.dataZoom = _dataZoom; // 为了使dataZoom中x轴的endValue生效，这里要设置下x轴的max

      _chartOption.xAxis.max = xMax && (0, _big["default"])(xMax).plus((0, _big["default"])(xMax).times(0.1).abs().toNumber()).toNumber() || 100;
      _chartOption.yAxis[0].max = yMax && (0, _big["default"])(yMax).plus((0, _big["default"])(yMax).times(0.1).abs().toNumber()).toNumber() || 100;

      _chartOption.xAxis.axisLabel.formatter = function (value) {
        if (xMax <= 100 && value > 100) {
          return '';
        }

        return "".concat(value).concat(_valueList[0].isPercent ? '%' : '');
      };

      _chartOption.yAxis[0].axisLabel.formatter = function (value) {
        if (yMax <= 100 && value > 100) {
          return '';
        }

        return "".concat(value).concat(_valueList[1].isPercent ? '%' : '');
      };
    } else {
      // 无对比维度
      var processedData = data === null || data === void 0 ? void 0 : data.map(function (d) {
        var values = new Array(_valueList.length).fill(0);

        _valueList.map(function (v, i) {
          if (d[v.fieldKey] != null) {
            values[i] = (0, _big["default"])(d[v.fieldKey]);

            if (v.isPercent) {
              values[i] = values[i].times(100);
            }

            values[i] = values[i].round(v.decimalLength || 0).toNumber();
          }
        });

        if (_valueList.length === 3) {
          return [].concat(_toConsumableArray(values), [d[_dimension[0].fieldKey], d]);
        } else {
          return [].concat(_toConsumableArray(values), [1, d[_dimension[0].fieldKey], d]);
        }
      });
      var _userColorFromSetOption = null;

      if (setOption) {
        var _option2 = setOption((0, _clone["default"])(_chartOption));

        _userColorFromSetOption = _option2.color;
      }

      var _getColor = (0, _react.useCallback)(function (index) {
        var userColor = userOptions === null || userOptions === void 0 ? void 0 : userOptions.color;

        if (_userColorFromSetOption) {
          return _userColorFromSetOption[index % _userColorFromSetOption.length];
        } else if (userColor) {
          return userColor[index % userColor.length];
        } else {
          return _core.COLOR_LIST[index % _core.COLOR_LIST.length];
        }
      }, [userOptions === null || userOptions === void 0 ? void 0 : userOptions.color, _userColorFromSetOption]);

      var _minSymbolSize = minDotSize !== null && minDotSize !== void 0 ? minDotSize : 50;

      var _maxSymbolSize = maxDotSize !== null && maxDotSize !== void 0 ? maxDotSize : 100;

      var _getSymbolSize = (0, _react.useCallback)(function (list) {
        var symbolList = list.map(function (item) {
          return item[2];
        }).sort(function (value1, value2) {
          return value1 - value2;
        });
        var min = symbolList[0];
        var max = symbolList[symbolList.length - 1];
        var scale = _valueList.length === 3 ? (0, _big["default"])(max - min).div(_maxSymbolSize - _minSymbolSize).toNumber() || 1 : 1;
        list.forEach(function (item, index) {
          item[5] = _valueList.length === 3 ? (0, _big["default"])(item[2] - min).div(scale).plus(_minSymbolSize).round(2).toNumber() : 80;
          item[6] = _getColor(index);
        });
        return list;
      }, [_getColor]);

      _chartOption.grid.x = 70;
      _chartOption.grid.x2 = 130;
      _chartOption.grid.top = 50;
      _chartOption.grid.bottom = 130;
      _chartOption.xAxis.name = _valueList[0].fieldName;
      _chartOption.xAxis.nameLocation = 'center';
      _chartOption.xAxis.nameTextStyle = {
        color: '#666'
      };
      _chartOption.xAxis.nameGap = 40;
      _chartOption.xAxis.type = 'value';
      _chartOption.xAxis.show = true;

      _chartOption.xAxis.axisLabel.formatter = function (value) {
        return "".concat(value).concat(_valueList[0].isPercent ? '%' : '');
      };

      _chartOption.yAxis[0].show = true;
      _chartOption.yAxis[0].name = _valueList[1].fieldName; // _chartOption.yAxis[0].nameRotate = -90;

      _chartOption.yAxis[0].nameGap = 60;
      _chartOption.yAxis[0].nameLocation = 'center';
      _chartOption.yAxis[0].nameTextStyle = {
        color: '#666'
      };

      _chartOption.yAxis[0].axisLabel.formatter = function (value) {
        return "".concat(value).concat(_valueList[1].isPercent ? '%' : '');
      };

      _chartOption.xAxis.boundaryGap = ['1%', '1%'];
      _chartOption.xAxis.axisLine.show = false;
      _chartOption.xAxis.axisTick.show = false;
      _chartOption.xAxis.offset = 20;
      _chartOption.yAxis[0].axisLine.show = false;
      _chartOption.yAxis[0].axisTick.show = false;
      _chartOption.yAxis[0].boundaryGap = ['1%', '1%'];
      _chartOption.yAxis[0].offset = 20;
      _chartOption.tooltip = {
        show: true,
        trigger: 'item',
        backgroundColor: 'rgba(255,255,255,0.9)',
        extraCssText: 'box-shadow: 0px 0px 4px 0px rgba(0,0,0,0.25); border-radius: 2px; padding:10px 14px',
        formatter: function formatter(item) {
          return "<div style=\"color: #c8c8c8;\">\n                  <span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:".concat(item.color, "\"></span>\n                  <span>").concat(item.name, ":</span>\n                  <div><span style=\"color: #595959;\">").concat(_valueList[0].fieldName, "</span>:<span style=\"color: #262626;\">").concat(item.value[0]).concat(_valueList[0].isPercent ? '%' : '', "</span></div>\n                  <div><span style=\"color: #595959;\">").concat(_valueList[1].fieldName, "</span>:<span style=\"color: #262626;\">").concat(item.value[1]).concat(_valueList[1].isPercent ? '%' : '', "</span></div>\n              </div>");
        }
      };
      _chartOption.series = echartsSeries || [{
        type: 'scatter',
        symbolSize: function symbolSize(data) {
          return data[5];
        },
        itemStyle: {
          normal: {
            color: function color(seriesIndex) {
              return seriesIndex.value[6];
            }
          }
        },
        data: _getSymbolSize(processedData || []).map(function (item) {
          return {
            name: "".concat(item[3]),
            value: item,
            label: {
              show: true,
              position: 'inside',
              color: '#000',
              formatter: function formatter(params) {
                var name = params.data.name;
                return (0, _core.truncate)(name, 6);
              },
              fontSize: 12,
              rich: {
                text: {
                  color: '#000'
                }
              }
            }
          };
        })
      }];

      var _xMin = processedData && processedData[0] && processedData[0][0],
          _xMax = processedData && processedData[0] && processedData[0][0],
          _yMin = processedData && processedData[0] && processedData[0][1],
          _yMax = processedData && processedData[0] && processedData[0][1];

      processedData === null || processedData === void 0 ? void 0 : processedData.forEach(function (item) {
        _xMin = Math.min(item[0], _xMin);
        _xMax = Math.max(item[0], _xMax);
        _yMin = Math.min(item[1], _yMin);
        _yMax = Math.max(item[1], _yMax);
      });
      var _dataZoom2 = [// {
        //   type: 'inside',
        //   show: true,
        //   xAxisIndex: [0],
        //   bottom: 30,
        //   start: 0,
        //   end: 100,
        //   labelFormatter: '',
        // },
        // {
        //   type: 'inside',
        //   show: true,
        //   yAxisIndex: [0],
        //   right: 0,
        //   start: 0,
        //   end: 100,
        //   labelFormatter: '',
        // },
      ];

      if (dataZoomX) {
        _dataZoom2.push({
          type: 'slider',
          show: true,
          xAxisIndex: [0],
          bottom: 30,
          start: dataZoomX.start,
          end: dataZoomX.end,
          throttle: 150
        });
      } else {
        _dataZoom2.push({
          type: 'slider',
          show: true,
          xAxisIndex: [0],
          bottom: 30,
          startValue: _xMin || 0,
          endValue: _xMax && (0, _big["default"])(_xMax).plus((0, _big["default"])(_xMax).times(0.1).abs().toNumber()).toNumber() || 100,
          throttle: 150
        });
      }

      if (dataZoomY) {
        _dataZoom2.push({
          type: 'slider',
          show: true,
          yAxisIndex: [0],
          right: 30,
          start: dataZoomY.start,
          end: dataZoomY.end
        });
      } else {
        _dataZoom2.push({
          type: 'slider',
          show: true,
          yAxisIndex: [0],
          right: 30,
          startValue: _yMin || 0,
          endValue: _yMax || 100
        });
      }

      _chartOption.dataZoom = _dataZoom2; // 为了使dataZoom中x轴的endValue生效，这里要设置下x轴的max

      _chartOption.xAxis.max = _xMax && (0, _big["default"])(_xMax).plus((0, _big["default"])(_xMax).times(0.1).abs().toNumber()).toNumber() || 100;

      _chartOption.xAxis.axisLabel.formatter = function (value) {
        if (_xMax <= 100 && value > 100) {
          return '';
        }

        return "".concat(value).concat(_valueList[0].isPercent ? '%' : '');
      };
    }
  }

  var builtOption = (0, _core.buildChartOption)(_chartOption, restSettings, 'scatter');
  var options = (0, _core.mergeOption)(builtOption, userOptions);

  if (setOption) {
    options = setOption((0, _clone["default"])(options));
  }

  var onDataZoomChange = (0, _react.useCallback)(function (params) {
    if (params.dataZoomId == "\0series\x000\x000") {
      setDataZoomX({
        start: params === null || params === void 0 ? void 0 : params.start,
        end: params === null || params === void 0 ? void 0 : params.end
      });
    } else if (params.dataZoomId == "\0series\x001\x000") {
      setDataZoomY({
        start: params === null || params === void 0 ? void 0 : params.start,
        end: params === null || params === void 0 ? void 0 : params.end
      });
    }
  }, []);
  var onEvents = {
    datazoom: onDataZoomChange
  };
  /**
   * forward the ref for getEchartsInstance()
   */

  var reactEchartsRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      getEchartsInstance: function getEchartsInstance() {
        var _reactEchartsRef$curr;

        return reactEchartsRef === null || reactEchartsRef === void 0 ? void 0 : (_reactEchartsRef$curr = reactEchartsRef.current) === null || _reactEchartsRef$curr === void 0 ? void 0 : _reactEchartsRef$curr.getEchartsInstance();
      }
    };
  }, [reactEchartsRef]);
  return /*#__PURE__*/_react["default"].createElement(_echartsForReact["default"], _extends({
    ref: function ref(e) {
      reactEchartsRef.current = e;
    },
    option: _objectSpread({}, (0, _clone["default"])(options)),
    notMerge: true,
    opts: {
      renderer: 'svg'
    },
    style: {
      height: '100%',
      width: '100%'
    },
    onEvents: onEvents
  }, resetOptions));
});
exports.Scatter = Scatter;