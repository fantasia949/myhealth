"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quadrantSetting = void 0;

var _clone = _interopRequireDefault(require("clone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var quadrantSetting = function quadrantSetting(option, quadrantSettingOption) {
  if (quadrantSettingOption && quadrantSettingOption.show) {
    var _option$series;

    var _data = Array.isArray(option.series) && (_option$series = option.series) !== null && _option$series !== void 0 && _option$series.length ? (0, _clone["default"])(option.series[0].data) : null;

    var len = _data && _data.length;

    if (len) {
      var _option$series2;

      // 象限图相关
      var quadrantType = quadrantSettingOption.quadrantType,
          quadrant1Name = quadrantSettingOption.quadrant1Name,
          quadrant2Name = quadrantSettingOption.quadrant2Name,
          quadrant3Name = quadrantSettingOption.quadrant3Name,
          quadrant4Name = quadrantSettingOption.quadrant4Name,
          bgColors = quadrantSettingOption.bgColors;
      var maxX = 0;
      var maxY = 0;
      var medianX = 0;
      var medianY = 0; // 计算最大最小值

      _data.map(function (item) {
        maxX = Math.max(item.value[0], maxX);
        maxY = Math.max(item.value[1], maxY);
        return item;
      }); // 计算中位数


      if (len && quadrantType === 'median') {
        var _medianXDataList$Math, _medianXDataList, _medianXDataList$Math2, _medianYDataList$Math, _medianYDataList, _medianYDataList$Math2;

        var medianXDataList = (0, _clone["default"])(_data).sort(function (prev, next) {
          return prev.value[0] - next.value[0];
        });
        var medianYDataList = (0, _clone["default"])(_data).sort(function (prev, next) {
          return prev.value[1] - next.value[1];
        });
        medianX = len % 2 === 1 ? (_medianXDataList$Math = medianXDataList[Math.floor(len / 2)]) === null || _medianXDataList$Math === void 0 ? void 0 : _medianXDataList$Math.value[0] : (((_medianXDataList = medianXDataList[Math.floor(len / 2) - 1]) === null || _medianXDataList === void 0 ? void 0 : _medianXDataList.value[0]) + ((_medianXDataList$Math2 = medianXDataList[Math.floor(len / 2)]) === null || _medianXDataList$Math2 === void 0 ? void 0 : _medianXDataList$Math2.value[0])) / 2;
        medianY = len % 2 === 1 ? (_medianYDataList$Math = medianYDataList[Math.floor(len / 2)]) === null || _medianYDataList$Math === void 0 ? void 0 : _medianYDataList$Math.value[1] : (((_medianYDataList = medianYDataList[Math.floor(len / 2) - 1]) === null || _medianYDataList === void 0 ? void 0 : _medianYDataList.value[1]) + ((_medianYDataList$Math2 = medianYDataList[Math.floor(len / 2)]) === null || _medianYDataList$Math2 === void 0 ? void 0 : _medianYDataList$Math2.value[1])) / 2;
      }

      option.xAxis = option.xAxis || {};

      if (!Array.isArray(option.xAxis)) {
        option.xAxis.max = maxX;
      }

      option.grid = option.grid || {};

      if (!Array.isArray(option.grid)) {
        option.grid.right = 70;
      }

      if (Array.isArray(option.series) && (_option$series2 = option.series) !== null && _option$series2 !== void 0 && _option$series2[0]) {
        option.series[0].markLine = _objectSpread(_objectSpread({}, option.series[0].markLine), {
          silent: true,
          symbol: 'none',
          label: {
            show: false
          },
          lineStyle: {
            normal: {
              color: 'rgba(255,255,255,0.5)',
              // color: 'rgba(0,0,0,0.5)',
              type: 'dotted',
              width: 1
            }
          },
          data: quadrantType === 'equal' ? [[{
            xAxis: '0',
            yAxis: "".concat(maxY / 2)
          }, {
            xAxis: 'max',
            yAxis: "".concat(maxY / 2)
          }], [{
            xAxis: "".concat(maxX / 2),
            yAxis: '0'
          }, {
            xAxis: "".concat(maxX / 2),
            yAxis: 'max'
          }]] : [{
            type: quadrantType,
            valueIndex: 0
          }, {
            valueIndex: 1,
            type: quadrantType
          }]
        });
        option.series[0].markArea = _objectSpread(_objectSpread({}, option.series[0].markArea), {
          silent: true,
          label: {
            position: 'insideTop'
          },
          data: [[{
            name: quadrant1Name,
            itemStyle: {
              color: bgColors[0]
            },
            xAxis: quadrantType === 'equal' ? "".concat(maxX / 2) : quadrantType === 'median' ? "".concat(medianX) : quadrantType,
            yAxis: quadrantType === 'equal' ? "".concat(maxY / 2) : quadrantType === 'median' ? "".concat(medianY) : quadrantType
          }, {
            xAxis: 'max',
            yAxis: 'max'
          }], [{
            name: quadrant2Name,
            itemStyle: {
              color: bgColors[1]
            },
            xAxis: quadrantType === 'equal' ? "".concat(maxX / 2) : quadrantType === 'median' ? "".concat(medianX) : quadrantType,
            yAxis: 0
          }, {
            xAxis: 'max',
            yAxis: quadrantType === 'equal' ? "".concat(maxY / 2) : quadrantType === 'median' ? "".concat(medianY) : quadrantType
          }], [{
            name: quadrant4Name,
            itemStyle: {
              color: bgColors[3]
            },
            xAxis: 0,
            yAxis: quadrantType === 'equal' ? "".concat(maxY / 2) : quadrantType === 'median' ? "".concat(medianY) : quadrantType
          }, {
            xAxis: quadrantType === 'equal' ? "".concat(maxX / 2) : quadrantType === 'median' ? "".concat(medianX) : quadrantType,
            yAxis: 'max'
          }], [{
            name: quadrant3Name,
            itemStyle: {
              color: bgColors[2]
            },
            xAxis: 0,
            yAxis: 0
          }, {
            xAxis: quadrantType === 'equal' ? "".concat(maxX / 2) : quadrantType === 'median' ? "".concat(medianX) : quadrantType,
            yAxis: quadrantType === 'equal' ? "".concat(maxY / 2) : quadrantType === 'median' ? "".concat(medianY) : quadrantType
          }]]
        });
      }
    }
  }
};

exports.quadrantSetting = quadrantSetting;